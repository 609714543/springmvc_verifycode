<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
						
	<!-- 启用spring mvc 注解 -->
    <context:annotation-config/>
    
  	<!-- 自动扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 (POJO（Plain Old Java Object）简单的Java对象，实际就是普通JavaBeans) -->
    <context:component-scan base-package="wk.controller" />
    <context:component-scan base-package="wk.service.*" />
    <context:component-scan base-package="wk.dao.*" />
  
    <!-- 完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
    
    <!--  annotation默认的方法映射适配器 -->    
	<mvc:annotation-driven/>
	
    <!-- 定义JSP文件的位置 --> 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->	
	<mvc:resources mapping="/commons/**" location="/commons/"/>  
    <mvc:resources mapping="/css/**" location="/css/"/>  
    <mvc:resources mapping="/images/**" location="/images/"/> 
    <mvc:resources mapping="/include/**" location="/include/"/> 
    <mvc:resources mapping="/res/**" location="/res/"/> 
    <mvc:resources mapping="/template/**" location="/template/"/> 
	<mvc:default-servlet-handler/>
	
	<!-- 定义无需Controller的url<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/"/>
	
	<!-- 将Controller抛出的异常转到特定View(视图), 保持SiteMesh的装饰效果 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
		<property name="exceptionMappings">  
			<props>  
				<prop key="java.lang.Throwable">error/500</prop>
            </props>  
		</property>  
    </bean>
	
  <!-- 载入数据库配置文件 -->
    <context:property-placeholder location="classpath:*jdbc.properties" />
   
   <!-- 配置数据源 -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
    <property name="driverClassName">
    	<value>${jdbc.dirverClass}</value>
    </property>
    <property name="url">
    	<value>${jdbc.url}</value>
    </property>
    <property name="username">
    	<value>${jdbc.username}</value>
    </property>
    <property name="password">
    	<value>${jdbc.password}</value>
    </property>
    <!--在不新建连接的条件下，池中保持空闲的最少连接数。 -->
    <property name="minIdle" value="1"></property>
   	<!--池里不会被释放的最多空闲连接数量。设置为0时表示无限制.-->
    <property name="maxIdle" value="20"></property>
    <!--池启动时创建的连接数量 -->
    <property name="initialSize" value="5"></property>
    <!-- 同一时间能够从语句池里分配的已备语句的最大数量。设置为0时表示无限制。name="maxOpenPreparedStatements" -->
    <!-- 在抛出异常之前，池等待连接被回收的最长时间（当没有可用连接时）。设置为-1表示无限等待。超时等待时间以毫秒为单位 name="maxWait" -->
    <!-- 连接保持空闲而不被驱逐的最长时间。name="minEvictableIdleTimeMillis" -->
    <!-- 是否对已备语句进行池管理（布尔值）。 name="poolPreparedStatements"-->
    <!-- 设置在自动回收超时连接的时候打印连接的超时错误 name="logAbandoned" value="true" -->
    <!-- 设置自动回收超时连接 property name="removeAbandoned"  value="true" -->
    <!-- 自动回收超时时间(以秒数为单位)name="removeAbandonedTimeout" value="10" -->
  </bean>
  
  <!-- 配置Jdbc模板 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>  
    
  <!-- 配置事务管理器 -->
  <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="dataSource" />
        	
  <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 --> 
  <aop:config proxy-target-class="true">
     <aop:pointcut id="serviceMethod" 
         expression=" execution(* wk.service..*(..))" /> 
     <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" /> 
  </aop:config>  
  <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
     <tx:attributes> 
         <tx:method name="*" /> 
     </tx:attributes> 
  </tx:advice> 
</beans>